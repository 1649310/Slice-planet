// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$arrow-name: 'arrow';
$arrow-x: 0px;
$arrow-y: 20px;
$arrow-offset-x: 0px;
$arrow-offset-y: -20px;
$arrow-width: 10px;
$arrow-height: 6px;
$arrow-total-width: 46px;
$arrow-total-height: 26px;
$arrow-image: '../img/sprite.png';
$arrow: (0px, 20px, 0px, -20px, 10px, 6px, 46px, 26px, '../img/sprite.png', 'arrow', );
$arrow-left-name: 'arrow_left';
$arrow-left-x: 40px;
$arrow-left-y: 0px;
$arrow-left-offset-x: -40px;
$arrow-left-offset-y: 0px;
$arrow-left-width: 6px;
$arrow-left-height: 10px;
$arrow-left-total-width: 46px;
$arrow-left-total-height: 26px;
$arrow-left-image: '../img/sprite.png';
$arrow-left: (40px, 0px, -40px, 0px, 6px, 10px, 46px, 26px, '../img/sprite.png', 'arrow_left', );
$arrow-right-name: 'arrow_right';
$arrow-right-x: 40px;
$arrow-right-y: 15px;
$arrow-right-offset-x: -40px;
$arrow-right-offset-y: -15px;
$arrow-right-width: 6px;
$arrow-right-height: 10px;
$arrow-right-total-width: 46px;
$arrow-right-total-height: 26px;
$arrow-right-image: '../img/sprite.png';
$arrow-right: (40px, 15px, -40px, -15px, 6px, 10px, 46px, 26px, '../img/sprite.png', 'arrow_right', );
$star-name: 'star';
$star-x: 0px;
$star-y: 0px;
$star-offset-x: 0px;
$star-offset-y: 0px;
$star-width: 15px;
$star-height: 15px;
$star-total-width: 46px;
$star-total-height: 26px;
$star-image: '../img/sprite.png';
$star: (0px, 0px, 0px, 0px, 15px, 15px, 46px, 26px, '../img/sprite.png', 'star', );
$star-write-name: 'star_write';
$star-write-x: 20px;
$star-write-y: 0px;
$star-write-offset-x: -20px;
$star-write-offset-y: 0px;
$star-write-width: 15px;
$star-write-height: 15px;
$star-write-total-width: 46px;
$star-write-total-height: 26px;
$star-write-image: '../img/sprite.png';
$star-write: (20px, 0px, -20px, 0px, 15px, 15px, 46px, 26px, '../img/sprite.png', 'star_write', );
$spritesheet-width: 46px;
$spritesheet-height: 26px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($arrow, $arrow-left, $arrow-right, $star, $star-write, );
$spritesheet: (46px, 26px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
